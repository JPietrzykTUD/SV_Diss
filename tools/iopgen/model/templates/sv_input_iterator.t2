{%- macro var_increment(var, inc) -%}
{% if inc == 0 %}
{{- var -}}
{% elif inc == 1 %}
{{- "++{}".format(var) -}}
{% else %}
{{- "{} += {}".format(var,inc) -}}
{% endif %}
{%- endmacro -%}
{%- macro ptr_access_increment(ptr_access, inc) -%}
{%- if inc == 0 -%}
{{- ptr_access -}}
{%- else -%}
{{- "{}+{}".format(ptr_access, inc) -}}
{%- endif -%}
{%- endmacro -%}
{%- macro increment_instructions(container_name, increment_instruction_list) -%}
{%- for increment_instruction_dict in increment_instruction_list %}
{{- var_increment("{}[{}]".format(container_name, increment_instruction_dict['dataptr_container_pos']), increment_instruction_dict['increment']) -}};
{% endfor -%}
{%- endmacro -%}
{%- macro load_preamble_implementation_m() -%}
{% block load_preamble_implementation %}{% endblock %}
{%- endmacro -%}

{% set class_name = 'sv_ip_' ~ loader_name ~ '_' ~ distribution_name %}
template<VectorProcessingStyle Vec, uint16_t PipelineOperatorCount, uint16_t ColumnCount>
class {{ class_name }};

{% for distribution in distribution_variants %}
{% set distribution_ns = namespace(container_name = distribution['dataptr_container_name']) %}
template<>
{{ class_name }}<{{ extension['register_name'] }}, {{ distribution['number_of_pipeline_ops'] }}, {{ distribution['number_of_columns'] }}> {
/**
 * Implementation for {{ name }} input proxy.
 * #Pipeline-Operators: {{ distribution['number_of_pipeline_ops'] }}.
 * #Accessed Data:      {{ distribution['number_of_columns'] }}.
 * SIMD Extension:      {{ extension['register_name'] }} ({{ extension['simd_register_size'] }} bit wide SIMD registers).
 * Distribution:        {{ distribution['distribution_description'] }}
{% filter indent(width=1) +%}
{% block loader_description scoped %}{% endblock %}
{% endfilter %}
 */
   public: //Typedefs
      //Alias of data pointer type
      using {{ distribution['dataptr_t'] }} = {{ extension['data_type'] }} const * __restrict__;

   public: //Access methods
      /**
       * Creates a SIMD-Register from the current data pointers pointed to by {{ distribution['dataptr_container_name'] }} and increments the pointer accordingly.
       */
      auto operator()(void) -> typename {{ extension['register_name'] }}::register_type {
         {%- filter indent(width=9) +%}
         {% block load_implementation scoped %}
         {{- increment_instructions(distribution['dataptr_container_name'], distribution['increment_instructions_list']) -}}
         {% endblock -%}
         {% endfilter %}
      }
   public: //Iterator Methods
      auto operator++() -> {{ class_name }} & {
         {%- filter indent(width=9) +%}
{{ increment_instructions(distribution['dataptr_container_name'], distribution['increment_instructions_list']) -}}
         {% endfilter %}
         return *this;
      }
      auto operator++(int) -> {{ class_name }} & {
         auto tmp = *this;
         {%- filter indent(width=9) +%}
{{ increment_instructions(distribution['dataptr_container_name'], distribution['increment_instructions_list']) -}}
         {% endfilter %}
         return tmp;
      }
      auto get_simd_register() const -> typename {{ extension['register_name'] }}::register_type {

      }
   public: //Cast
      //static auto next({{ class_name }} const & current) -> {{ class_name }} {
      //
      //}
   public: //Constructors / Destructors
      {{ class_name }}() = delete;
      //Constructor
      {{ class_name }}({{ distribution['ctor_parameter_list']|join(', ') }}):
      {%- filter indent(width=8) +%}
      {% block private_member_initialization scoped %}
      {% set assignment = distribution['dataptr_container_name'] ~ "{" ~ (distribution['ctor_dataptr_container_inititialization_list']|join(', ')) ~ "}" %}
      {{- assignment -}}
      {% endblock %}
      {% endfilter %}
      {
         {% block ctor scoped %}{% endblock %}
      }
      //Copy-Constructor
      {{ class_name }}({{ class_name }} const & other):
      {%- filter indent(width=8) +%}
      {% block private_member_copy_initialization scoped %}
      {% set assignment = distribution['dataptr_container_name'] ~ "{other." ~ distribution['dataptr_container_name'] ~ "}" %}
      {{- assignment -}}
      {% endblock %}
      {% endfilter %}
     {
         {%- filter indent(width=9) +%}
         {% block copy_ctor scoped %}{% endblock %}
         {% endfilter %}
     }
      //Copy-Assignment
      auto operator=({{ class_name }} const & other) -> {{ class_name }} & {
         {{ distribution['dataptr_container_name'] }} = other.{{ distribution['dataptr_container_name'] }};
         {%- filter indent(width=9) +%}
         {% block copy_assignment_ctor scoped %}{% endblock %}
         {% endfilter %}
         return *this
      }
      //Move-Constructor
      {{ class_name }}({{ class_name }} && other):
      {%- filter indent(width=8) +%}
      {% block private_member_move_initialization scoped %}
      {% set assignment = distribution['dataptr_container_name'] ~ "{std::move(other." ~ distribution['dataptr_container_name'] ~ ")}" %}
      {{- assignment -}}
      {% endblock %}
      {% endfilter %}
      {
         {%- filter indent(width=9) +%}
         {% block move_ctor scoped %}{% endblock %}
         {% endfilter %}
      }
      //Move-Assignment
      auto operator=({{ class_name }} && other) -> {{ class_name }} & {
         {{ distribution['dataptr_container_name'] }} = std::move(other.{{ distribution['dataptr_container_name'] }});
         {%- filter indent(width=9) +%}
         {% block move_assignment_ctor scoped %}{% endblock %}
         {% endfilter %}
         return *this;
      }
      //Destructor
      ~{{ class_name }}() {
         {%- filter indent(width=9) +%}
         {% block destructor scoped %}{% endblock %}
         {% endfilter %}
      }
   private: //Member
      std::array<{{ extension['data_type'] }} const *, {{ distribution['unique_data_ptr_count'] }}> {{ distribution['dataptr_container_name'] }};
      {%- filter indent(width=6) +%}
      {% block private_member scoped %}{% endblock %}
      {% endfilter %}
};
{% endfor %}