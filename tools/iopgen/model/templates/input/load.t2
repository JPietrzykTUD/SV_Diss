{% extends 'sv_input_iterator.t2' %}

{% set loader_name = 'buffer_load' %}

{% block loader_description %}
* Lanes per Pipeline-Operator:  MISSING NUMBER(!!!) TODO TODO TODO.
{% endblock %}

{% block private_member %}
{{ extension['data_type'] }} * const m_buf;
{% endblock %}

{% block private_member_initialization %}
{{- super() -}},
m_buf{allocate_aligned<{{ extension['register_name'] }}>({{ extension['register_name'] }}::vector_size_B(), {{ extension['register_name'] }}::vector_alignment())}
{% endblock %}

{% block ctor %}{% endblock %}

{% block private_member_copy_initialization %}
{{- super() -}},
m_buf{allocate_aligned<{{ extension['register_name'] }}>({{ extension['register_name'] }}::vector_size_B(), {{ extension['register_name'] }}::vector_alignment())}
{% endblock %}

{% block copy_ctor %}
std::memcpy(reinterpret_cast<char*>(m_buf), reinterpret_cast<char*>(other.m_buf), {{ extension['register_name'] }}::vector_size_B());
{% endblock %}

{% block copy_assignment_ctor %}
std::memcpy(reinterpret_cast<char*>(m_buf), reinterpret_cast<char*>(other.m_buf), {{ extension['register_name'] }}::vector_size_B());
{% endblock %}

{% block private_member_move_initialization %}
{{- super() -}},
m_buf{std::swap(other.m_buf, nullptr)}
{% endblock %}

{% block move_ctor %}{% endblock %}

{% block move_assignment_ctor %}
m_buf = std::swap(other.m_buf, nullptr);
{% endblock %}

{% block destructor %}
if(m_buf != nullptr) {
   deallocate<{{ extension['register_name'] }}>(m_buf);
}
{% endblock %}

{#{% block load_preamble#}

{% block load_implementation %}
{% set load_ns = namespace(idx=0) %}
{% for access_instruction_dict in distribution['access_instructions_list'] -%}
   {% if access_instruction_dict['redundant_access'] %}
   {# we introduce tmp variables here #}
      {% for assignment in access_instruction_dict['assignments'] %}
auto {{ assignment['variable_name'] }} = *{{- ptr_access_increment("{}[{}]".format(distribution['dataptr_container_name'], access_instruction_dict['dataptr_container_pos']), assignment['offset']) -}};
{# auto {{ assignment['variable_name'] }} = *{{ distribution['dataptr_container_name'] }}[{{ access_instruction_dict['dataptr_container_pos'] }}]+{{ assignment['offset'] }}; #}
      {% endfor %}
   {% endif %}
{% endfor -%}
{%- for access_instruction_dict in distribution['access_instructions_list'] %}
   {%- if access_instruction_dict['redundant_access'] %}
      {# we access the local variables here #}
      {%- for access in access_instruction_dict['access'] %}
m_buf[{{ load_ns.idx }}] = {{ access }};
      {% set load_ns.idx = load_ns.idx + 1 %}
      {%- endfor %}
   {%- else %}
      {% for offset in access_instruction_dict['offsets'] %}
m_buf[{{ load_ns.idx }}] = *{{- ptr_access_increment("{}[{}]".format(distribution['dataptr_container_name'], access_instruction_dict['dataptr_container_pos']), offset) -}};
      {% set load_ns.idx = load_ns.idx + 1 %}
      {% endfor %}
   {%- endif -%}
{% endfor %}
{{ super() -}}
return load<{{ extension['register_name'] }}>(m_buf);
{% endblock %}
